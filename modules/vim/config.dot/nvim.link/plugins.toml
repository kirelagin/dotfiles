##########
##
#  Plugins
##
##########


[[plugins]]
  repo = 'Shougo/dein.vim'

[[plugins]]
  repo = 'Shougo/vimproc.vim'
  build = 'make'

[[plugins]]
  repo = 'mattn/webapi-vim'



##########
##
#  Editing
##
##########

[[plugins]]
  # Guess indent options
  repo = 'tpope/vim-sleuth'

[[plugins]]
  # Preview colours (not only in CSS)
  repo = 'ap/vim-css-color'

[[plugins]]
  repo = 'nathanaelkane/vim-indent-guides'
  hook_source = '''
    let g:indent_guides_enable_on_vim_startup=0
  '''
  hook_add = '''
    nmap <silent> <Leader>ig <Plug>IndentGuidesToggle
  '''

[[plugins]]
  repo = 'Lokaltog/vim-easymotion'
  hook_add = '''
    let g:EasyMotion_smartcase=1

    map <Leader> <Plug>(easymotion-prefix)
    nmap f <Plug>(easymotion-fl)
    nmap F <Plug>(easymotion-Fl)
    omap f <Plug>(easymotion-fl)
    omap F <Plug>(easymotion-Fl)
    nmap t <Plug>(easymotion-tl)
    nmap T <Plug>(easymotion-Tl)
    omap t <Plug>(easymotion-tl)
    omap T <Plug>(easymotion-Tl)
    map  / <Plug>(easymotion-sn)
    omap / <Plug>(easymotion-tn)
    "map  n <Plug>(easymotion-next)
    "map  N <Plug>(easymotion-prev)
    let g:EasyMotion_startofline=0  " keep cursor column for j/k
  '''

[[plugins]]
  repo = 'haya14busa/vim-easyoperator-line'

[[plugins]]
  repo = 'junegunn/limelight.vim'
  hook_add = '''
    let g:limelight_priority = -1
    let g:limelight_default_coefficient = 0.7
    let g:limelight_conceal_guifg = '#777777'
  '''
  lazy = 1

[[plugins]]
  repo = 'junegunn/goyo.vim'
  depends = 'limelight.vim'
  hook_add = '''
    let g:goyo_width = 120

    function! s:goyo_enter()
      set noshowmode
      set noshowcmd
      let s:old_scrolloff = &scrolloff
      let &scrolloff = 999
      let s:old_neomake_open_list = g:neomake_open_list
      let g:neomake_open_list = 0
      Limelight
    endfunction
    function! s:goyo_leave()
      set showmode
      set showcmd
      let &scrolloff = s:old_scrolloff
      let g:neomake_open_list = s:old_neomake_open_list
      Limelight!
    endfunction
    autocmd! User GoyoEnter nested call <SID>goyo_enter()
    autocmd! User GoyoLeave nested call <SID>goyo_leave()

    map <silent> <F11> :Goyo<CR>
    imap <silent> <F11> <C-o>:Goyo<CR>
  '''
  lazy = 1

[[plugins]]
  repo = 'rickhowe/diffchar.vim'

[[plugins]]
  repo = 'tomtom/tcomment_vim'

[[plugins]]
  repo = 'tpope/vim-obsession'

[[plugins]]
  repo = 'jamessan/vim-gnupg'

[[plugins]]
  repo = 'tpope/vim-speeddating'
  lazy = 1


##########
##
#  Utilities
##
##########

[[plugins]]
  repo = 'neomake/neomake'
  hook_add = '''
    let g:neomake_open_list = 0
    "let g:neomake_logfile = '/tmp/neomake.log'

    let g:neomake_haskell_enabled_makers = ['hdevtools']

    autocmd ColorScheme *
      \ hi link NeomakeError SpellBad |
      \ hi link NeomakeWarning SpellCap
    "autocmd! BufWritePost * Neomake
  '''

[[plugins]]
  repo = 'sbdchd/neoformat'

[[plugins]]
  repo = 'Shougo/denite.nvim'
  hook_add = '''
    call denite#custom#option('default', {
      \ 'auto-action': 'preview',
      \ 'auto-resize': 'true',
      \ 'vertical-preview': 'true',
      \ 'winheight': '10',
      \ })
    autocmd FileType denite call s:denite_my_settings()
    function! s:denite_my_settings() abort
      nnoremap <silent><buffer><expr> p
      \ denite#do_map('do_action', 'preview')
    endfunction
    autocmd FileType denite-filter call s:denite_filter_my_settings()
    function! s:denite_filter_my_settings() abort
      noremap <silent><buffer><expr> <C-c>
        \ denite#do_map('quit')
      inoremap <silent><buffer> <C-j>
        \ <Esc><C-w>p:call cursor(line('.')+1,0)<CR><C-w>pA
      inoremap <silent><buffer> <C-k>
        \ <Esc><C-w>p:call cursor(line('.')-1,0)<CR><C-w>pA
      inoremap <silent><buffer><expr> <CR>
        \ denite#do_map('do_action')
      inoremap <silent><buffer><expr> <C-s>
        \ denite#do_map('do_action', 'split')
      inoremap <silent><buffer><expr> <C-v>
        \ denite#do_map('do_action', 'vsplit')
    endfunction
    call denite#custom#alias('source', 'file/rec/git', 'file/rec')
    call denite#custom#var('file/rec/git', 'command',
      \ ['git', 'ls-files', '-co', '--exclude-standard'])

    nnoremap <silent> <C-p> :<C-u>Denite
      \ -start-filter
      \ -highlight-matched-char=Underlined
      \ -highlight-matched-range=None
      \ -matchers=matcher/substring
      \ buffer
      \ `finddir('.git', ';') != '' ? 'file/rec/git' : 'file/rec'`<CR>
  '''

[[plugins]]
  repo = 'scrooloose/nerdtree'
  hook_add = '''
    let g:NERDTreeSortOrder = ['*', '\.swp$', '\.bak$', '\~$']  " Do not put dirs first
    nmap <silent> ,m :NERDTreeToggle<CR>
    nmap <silent> ,n :NERDTreeFind<CR>
  '''
  #on_map = [',m', ',n']

[[plugins]]
  repo = 'tpope/vim-fugitive'

[[plugins]]
  # GitHub stuff for fugitive
  repo = 'tpope/vim-rhubarb'

[[plugins]]
  repo = 'mattn/gist-vim'
  depends = 'webapi-vim'
  hook_add = '''
    let g:gist_update_on_write=2  " Update gists on :w!
  '''

[[plugins]]
  repo = 'whiteinge/diffconflicts'


##########
##
#  Syntax
##
##########

# Markup

[[plugins]]
  repo = 'cespare/vim-toml'
  on_ft = 'toml'

[[plugins]]
  repo = 'vim-pandoc/vim-pandoc-syntax'
  on_ft = 'pandoc'

[[plugins]]
  repo = 'jceb/vim-orgmode'
  depends = 'vim-speeddating'
  on_ft = 'org'
  lazy = 1


# Programming

[[plugins]]
  repo = 'tpope/vim-git'
  on_ft = ['git', 'gitcommit', 'gitconfig', 'gitrebase', 'gitsendemail']
  lazy = 0

[[plugins]]
  repo = 'LnL7/vim-nix'
  on_ft = 'nix'

[[plugins]]
  repo = 'rust-lang/rust.vim'
  on_ft = 'rust'

[[plugins]]
  repo = 'pangloss/vim-javascript'
  on_ft = 'javascript'
  lazy = 0

[[plugins]]
  repo = 'kchmck/vim-coffee-script'
  on_ft = ['coffee', 'litcoffee']
  lazy = 0

[[plugins]]
  repo = 'elixir-editors/vim-elixir'
  on_ft = ['elixir']
  lazy = 0

[[plugins]]
  repo = 'hashivim/vim-terraform'
  on_ft = ['terraform']
  lazy = 0
